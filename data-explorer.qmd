---
title: "Data Explorer"
format: 
  html:
    page-layout: full
execute:
  echo: false
  warning: false
  message: false
---

```{r setup}
#| include: false
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(plotly)
library(reactable)
library(DT)
library(htmlwidgets)
library(htmltools)

# Custom color palette
custom_colors <- list(
  primary = "#2E8B57",
  secondary = "#20B2AA", 
  success = "#28a745",
  warning = "#ffc107",
  danger = "#dc3545",
  info = "#17a2b8",
  light = "#f8f9fa",
  dark = "#343a40",
  gradient = c("#2E8B57", "#20B2AA", "#66CDAA", "#98FB98", "#90EE90")
)

# Helper functions
format_percent <- function(x, digits = 1) {
  paste0(round(x * 100, digits), "%")
}

format_number <- function(x, digits = 0) {
  format(round(x, digits), big.mark = ",", scientific = FALSE)
}

# Try to load data from CommCare API, fallback to local file if needed
tryCatch({
  # Configuration
  USERNAME <- "mohammed.seidhussen@oneacrefund.org"
  API_KEY <- "a749d18804539c5a2210817cda29630391a088bd"
  PROJECT_SPACE <- "oaf-ethiopia"
  FORM_ID <- "e24ab639e5b7d1b609cf2894f7057b75"
  
  # API Endpoint
  url <- paste0("https://www.commcarehq.org/a/", PROJECT_SPACE, "/api/v0.5/odata/forms/", FORM_ID, "/feed")
  
  # Enhanced data fetching with progress tracking
  limit <- 2000
  offset <- 0
  all_records <- list()
  
  cat("Fetching data from CommCare...\n")
  
  while (TRUE) {
    # Set query parameters
    query <- list(
      limit = limit,
      offset = offset
    )
    
    # Make API request with timeout
    response <- GET(
      url,
      query = query,
      authenticate(USERNAME, API_KEY, type = "basic"),
      timeout(10)
    )
    
    # Check response
    if (status_code(response) != 200) {
      cat(paste0("Error: ", status_code(response), "\n"))
      cat(content(response, "text"), "\n")
      break
    }
    
    # Parse response
    data <- fromJSON(content(response, "text"))
    records <- data$value
    
    if (length(records) == 0) {
      break
    }
    
    # Add records to collection
    all_records <- c(all_records, records)
    
    # Check if we have all records
    if (length(records) < limit) {
      break
    }
    
    # Update offset for next page
    offset <- offset + limit
    cat(paste0("Fetched ", length(all_records), " records so far...\n"))
  }
  
  # Convert to data frame
  df_raw <- bind_rows(all_records)
  
  # Drop farmer name and phone number 
  df_raw <- df_raw %>% 
    select(-any_of(c("farmer_name", "name", "phone_no", "tno")))
  
  cat(paste0("Successfully fetched ", nrow(df_raw), " records from CommCare\n"))
  
}, error = function(e) {
  cat("Failed to fetch from CommCare API, using local data file...\n")
  cat("Error:", e$message, "\n")
  
  # Fallback to local file
  if (file.exists("myapp/df.rds")) {
    df_raw <<- readRDS("myapp/df.rds")
    cat(paste0("Loaded ", nrow(df_raw), " records from local file\n"))
  } else {
    stop("No data source available. Please ensure either CommCare API is accessible or df.rds file exists.")
  }
})

# Process the data
df_processed <- df_raw %>%
  mutate(across(everything(), ~ na_if(., "---"))) %>%
  mutate(across(where(is.list), ~ sapply(., function(x) if(length(x) > 0) x[1] else NA))) %>%
  mutate(
    completed_time = ymd_hms(completed_time),
    started_time = ymd_hms(started_time)
  ) %>%
  mutate(
    date = as.Date(completed_time),
    week = floor_date(date, "week"),
    month = floor_date(date, "month"),
    hour_started = hour(started_time),
    day_of_week = wday(date, label = TRUE, week_start = 1),
    is_weekend = day_of_week %in% c("Sat", "Sun"),
    duration_minutes = as.numeric(difftime(completed_time, started_time, units = "mins")),
    is_night_survey = hour_started >= 19 | hour_started < 6,
    is_short_survey = duration_minutes <= 5,
    is_long_survey = duration_minutes >= 60
  ) %>%
  mutate(across(c(starts_with("ps_num_planted_"), starts_with("num_surv_")), as.numeric))

df_completed <- df_processed %>% filter(consent == 1)

# Prepare data for exploration
explorer_data <- df_completed %>%
  select(
    Date = date,
    Enumerator = username,
    Site = site,
    Woreda = woreda,
    Duration_min = duration_minutes,
    HH_Size = hh_size,
    Education = education_level,
    Age = age,
    Sex = sex,
    Day_of_Week = day_of_week,
    Hour_Started = hour_started,
    Is_Weekend = is_weekend,
    Is_Night_Survey = is_night_survey,
    Is_Short_Survey = is_short_survey
  ) %>%
  arrange(desc(Date))
```

## üìä Data Summary

::: {.dashboard-grid}
::: {.metric-card}
::: {.metric-label}
Total Records
:::
::: {.metric-value}
`r format_number(nrow(explorer_data))`
:::
:::

::: {.metric-card}
::: {.metric-label}
Unique Sites
:::
::: {.metric-value}
`r n_distinct(explorer_data$Site)`
:::
:::

::: {.metric-card}
::: {.metric-label}
Unique Enumerators
:::
::: {.metric-value}
`r n_distinct(explorer_data$Enumerator)`
:::
:::

::: {.metric-card}
::: {.metric-label}
Average Duration
:::
::: {.metric-value}
`r round(mean(explorer_data$Duration_min, na.rm = TRUE), 1)` min
:::
:::

::: {.metric-card}
::: {.metric-label}
Date Range
:::
::: {.metric-value}
`r min(explorer_data$Date)` to `r max(explorer_data$Date)`
:::
:::
:::

## üîç Interactive Data Table

::: {.table-container}
```{r explorer_table}
#| echo: false

# Create enhanced interactive table
DT::datatable(
  explorer_data,
  options = list(
    pageLength = 15,
    scrollX = TRUE,
    scrollY = "500px",
    dom = 'Bfrtip',
    buttons = list(
      'copy',
      list(extend = 'csv', filename = 'survival_survey_data'),
      list(extend = 'excel', filename = 'survival_survey_data'),
      list(extend = 'pdf', filename = 'survival_survey_data')
    ),
    columnDefs = list(
      list(className = 'dt-center', targets = c(4, 5, 6, 7, 10, 11, 12, 13, 14, 15))
    )
  ),
  extensions = c('Buttons', 'Scroller'),
  filter = 'top',
  rownames = FALSE,
  class = 'cell-border stripe hover'
) %>%
  DT::formatRound(columns = c("Duration_min"), digits = 1) %>%
  DT::formatDate(columns = "Date", method = "toLocaleDateString") %>%
  DT::formatStyle(
    "Duration_min",
    backgroundColor = DT::styleInterval(c(5, 30, 60), c("#ffebee", "#fff8e1", "#e8f5e8", "#ffebee"))
  ) %>%
  DT::formatStyle(
    "Is_Short_Survey",
    backgroundColor = DT::styleEqual(TRUE, "#ffebee")
  ) %>%
  DT::formatStyle(
    "Is_Night_Survey", 
    backgroundColor = DT::styleEqual(TRUE, "#fff8e1")
  ) %>%
  DT::formatStyle(
    "Is_Weekend",
    backgroundColor = DT::styleEqual(TRUE, "#e3f2fd")
  )
```
:::

## üìà Survey Distribution Over Time

::: {.plot-container}
```{r time_distribution}
#| echo: false

# Time series plot
daily_counts <- explorer_data %>%
  count(Date) %>%
  arrange(Date)

p1 <- plot_ly(daily_counts, 
        x = ~Date, 
        y = ~n,
        type = 'scatter',
        mode = 'lines+markers',
        line = list(color = custom_colors$primary, width = 2),
        marker = list(color = custom_colors$primary, size = 6),
        hovertemplate = "Date: %{x}<br>Surveys: %{y}<extra></extra>") %>%
  layout(
    title = "Survey Distribution Over Time",
    xaxis = list(title = "Date"),
    yaxis = list(title = "Number of Surveys"),
    paper_bgcolor = "transparent", 
    plot_bgcolor = "transparent",
    showlegend = FALSE
  )

p1
```
:::

## üìä Duration Analysis

::: {.plot-container}
```{r duration_analysis}
#| echo: false

# Duration histogram
p2 <- plot_ly(explorer_data, 
        x = ~Duration_min, 
        type = 'histogram',
        nbinsx = 30,
        marker = list(color = custom_colors$secondary),
        hovertemplate = "Duration: %{x} min<br>Count: %{y}<extra></extra>") %>%
  layout(
    title = "Survey Duration Distribution",
    xaxis = list(title = "Duration (minutes)"),
    yaxis = list(title = "Frequency"),
    paper_bgcolor = "transparent", 
    plot_bgcolor = "transparent",
    showlegend = FALSE
  )

p2
```
:::

## üè¢ Site Distribution

::: {.plot-container}
```{r site_distribution}
#| echo: false

# Site distribution
site_counts <- explorer_data %>%
  count(Site, sort = TRUE) %>%
  head(15)

p3 <- plot_ly(site_counts, 
        x = ~reorder(Site, -n), 
        y = ~n, 
        type = 'bar',
        marker = list(color = custom_colors$gradient[3]),
        hovertemplate = "Site: %{x}<br>Surveys: %{y}<extra></extra>") %>%
  layout(
    title = "Top 15 Sites by Survey Count",
    xaxis = list(title = "Site", tickangle = -45),
    yaxis = list(title = "Number of Surveys"),
    paper_bgcolor = "transparent", 
    plot_bgcolor = "transparent",
    showlegend = FALSE,
    margin = list(b = 120)
  )

p3
```
:::

## üë• Demographic Analysis

::: {.plot-container}
```{r demographic_analysis}
#| echo: false

# Education level distribution
education_counts <- explorer_data %>%
  filter(!is.na(Education)) %>%
  count(Education, sort = TRUE)

p4 <- plot_ly(education_counts, 
        labels = ~Education, 
        values = ~n, 
        type = 'pie',
        textposition = 'inside',
        textinfo = 'label+percent',
        hovertemplate = "Education: %{label}<br>Count: %{value}<br>Percentage: %{percent}<extra></extra>",
        marker = list(
          colors = custom_colors$gradient,
          line = list(color = '#FFFFFF', width = 2)
        )) %>%
  layout(
    title = "Education Level Distribution",
    paper_bgcolor = "transparent",
    showlegend = FALSE
  )

p4
```
:::

## üìä Survey Quality Metrics

::: {.plot-container}
```{r quality_metrics}
#| echo: false

# Quality metrics by day of week
quality_by_day <- explorer_data %>%
  group_by(Day_of_Week) %>%
  summarise(
    total_surveys = n(),
    short_surveys = sum(Is_Short_Survey, na.rm = TRUE),
    night_surveys = sum(Is_Night_Survey, na.rm = TRUE),
    avg_duration = mean(Duration_min, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    short_rate = (short_surveys / total_surveys) * 100,
    night_rate = (night_surveys / total_surveys) * 100
  )

p5 <- plot_ly(quality_by_day, x = ~Day_of_Week, y = ~short_rate, 
        type = 'bar', name = 'Short Survey Rate (%)',
        marker = list(color = custom_colors$danger),
        hovertemplate = "Day: %{x}<br>Short Survey Rate: %{y:.1f}%<extra></extra>") %>%
  add_trace(y = ~night_rate, name = 'Night Survey Rate (%)',
            marker = list(color = custom_colors$warning),
            hovertemplate = "Day: %{x}<br>Night Survey Rate: %{y:.1f}%<extra></extra>") %>%
  layout(
    title = "Survey Quality Metrics by Day of Week",
    xaxis = list(title = "Day of Week"),
    yaxis = list(title = "Rate (%)"),
    paper_bgcolor = "transparent", 
    plot_bgcolor = "transparent",
    barmode = 'group',
    legend = list(orientation = 'h', y = 1.1, x = 0.5, xanchor = 'center')
  )

p5
```
:::

## üìä Cross-tabulation Analysis

::: {.table-container}
```{r crosstab_analysis}
#| echo: false

# Create cross-tabulation of Site vs Education Level
crosstab_data <- explorer_data %>%
  filter(!is.na(Education) & !is.na(Site)) %>%
  count(Site, Education) %>%
  pivot_wider(names_from = Education, values_from = n, values_fill = 0) %>%
  arrange(desc(rowSums(select(., -Site))))

reactable(
  crosstab_data,
  columns = list(
    Site = colDef(
      name = "Site", 
      minWidth = 150,
      cell = function(value) {
        div(style = "font-weight: bold; color: #2E8B57;", value)
      }
    )
  ),
  defaultPageSize = 10,
  searchable = TRUE,
  highlight = TRUE,
  bordered = TRUE,
  striped = TRUE,
  theme = reactableTheme(
    headerStyle = list(backgroundColor = "#f8f9fa", fontWeight = "bold"),
    cellStyle = list(fontSize = "0.9em")
  )
)
```
:::