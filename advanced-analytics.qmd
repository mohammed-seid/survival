---
title: "Advanced Analytics"
format: 
  html:
    page-layout: full
execute:
  echo: false
  warning: false
  message: false
---

```{r setup}
#| include: false
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(plotly)
library(reactable)
library(DT)
library(htmlwidgets)
library(htmltools)
library(zoo)
library(tibble)

# Custom color palette
custom_colors <- list(
  primary = "#2E8B57",
  secondary = "#20B2AA", 
  success = "#28a745",
  warning = "#ffc107",
  danger = "#dc3545",
  info = "#17a2b8",
  light = "#f8f9fa",
  dark = "#343a40",
  gradient = c("#2E8B57", "#20B2AA", "#66CDAA", "#98FB98", "#90EE90")
)

# Helper functions
format_percent <- function(x, digits = 1) {
  paste0(round(x * 100, digits), "%")
}

format_number <- function(x, digits = 0) {
  format(round(x, digits), big.mark = ",", scientific = FALSE)
}

# Try to load data from CommCare API, fallback to local file if needed
tryCatch({
  # Configuration
  USERNAME <- "mohammed.seidhussen@oneacrefund.org"
  API_KEY <- "a749d18804539c5a2210817cda29630391a088bd"
  PROJECT_SPACE <- "oaf-ethiopia"
  FORM_ID <- "e24ab639e5b7d1b609cf2894f7057b75"
  
  # API Endpoint
  url <- paste0("https://www.commcarehq.org/a/", PROJECT_SPACE, "/api/v0.5/odata/forms/", FORM_ID, "/feed")
  
  # Enhanced data fetching with progress tracking
  limit <- 2000
  offset <- 0
  all_records <- list()
  
  cat("Fetching data from CommCare...\n")
  
  while (TRUE) {
    # Set query parameters
    query <- list(
      limit = limit,
      offset = offset
    )
    
    # Make API request with timeout
    response <- GET(
      url,
      query = query,
      authenticate(USERNAME, API_KEY, type = "basic"),
      timeout(10)
    )
    
    # Check response
    if (status_code(response) != 200) {
      cat(paste0("Error: ", status_code(response), "\n"))
      cat(content(response, "text"), "\n")
      break
    }
    
    # Parse response
    data <- fromJSON(content(response, "text"))
    records <- data$value
    
    if (length(records) == 0) {
      break
    }
    
    # Add records to collection
    all_records <- c(all_records, records)
    
    # Check if we have all records
    if (length(records) < limit) {
      break
    }
    
    # Update offset for next page
    offset <- offset + limit
    cat(paste0("Fetched ", length(all_records), " records so far...\n"))
  }
  
  # Convert to data frame
  df_raw <- bind_rows(all_records)
  
  # Drop farmer name and phone number 
  df_raw <- df_raw %>% 
    select(-any_of(c("farmer_name", "name", "phone_no", "tno")))
  
  cat(paste0("Successfully fetched ", nrow(df_raw), " records from CommCare\n"))
  
}, error = function(e) {
  cat("Failed to fetch from CommCare API, using local data file...\n")
  cat("Error:", e$message, "\n")
  
  # Fallback to local file
  if (file.exists("myapp/df.rds")) {
    df_raw <<- readRDS("myapp/df.rds")
    cat(paste0("Loaded ", nrow(df_raw), " records from local file\n"))
  } else {
    stop("No data source available. Please ensure either CommCare API is accessible or df.rds file exists.")
  }
})

# Process the data
df_processed <- df_raw %>%
  mutate(across(everything(), ~ na_if(., "---"))) %>%
  mutate(across(where(is.list), ~ sapply(., function(x) if(length(x) > 0) x[1] else NA))) %>%
  mutate(
    completed_time = ymd_hms(completed_time),
    started_time = ymd_hms(started_time)
  ) %>%
  mutate(
    date = as.Date(completed_time),
    week = floor_date(date, "week"),
    month = floor_date(date, "month"),
    hour_started = hour(started_time),
    day_of_week = wday(date, label = TRUE, week_start = 1),
    is_weekend = day_of_week %in% c("Sat", "Sun"),
    duration_minutes = as.numeric(difftime(completed_time, started_time, units = "mins")),
    is_night_survey = hour_started >= 19 | hour_started < 6,
    is_short_survey = duration_minutes <= 5,
    is_long_survey = duration_minutes >= 60
  ) %>%
  mutate(across(c(starts_with("ps_num_planted_"), starts_with("num_surv_")), as.numeric))

df_completed <- df_processed %>% filter(consent == 1)
```

## ðŸ“Š Advanced Analytics Dashboard

### Survey Completion Funnel Analysis

::: {.plot-container}
```{r funnel_analysis}
#| echo: false

# Create funnel data
funnel_data <- data.frame(
  stage = c("Total Attempts", "Consented", "Completed", "Quality Surveys"),
  value = c(
    nrow(df_processed),
    sum(df_processed$consent == 1, na.rm = TRUE),
    nrow(df_completed),
    sum(!df_completed$is_short_survey & !df_completed$is_night_survey, na.rm = TRUE)
  )
) %>%
  mutate(
    percentage = round((value / value[1]) * 100, 1),
    drop_rate = c(0, round((lag(value) - value) / lag(value) * 100, 1)[-1])
  )

p1 <- plot_ly(funnel_data, 
        type = 'funnel',
        y = ~stage, 
        x = ~value,
        textposition = "inside", 
        textinfo = "value+percent initial",
        marker = list(
          color = c(custom_colors$primary, custom_colors$secondary, custom_colors$success, custom_colors$info)
        ),
        hovertemplate = "Stage: %{y}<br>Count: %{x}<br>Percentage: %{customdata}%<extra></extra>",
        customdata = ~percentage) %>%
  layout(
    title = "Survey Completion Funnel",
    paper_bgcolor = "transparent",
    font = list(color = custom_colors$dark)
  )

p1
```
:::

### Survey Duration Distribution Analysis

::: {.plot-container}
```{r duration_distribution}
#| echo: false

# Duration analysis with multiple views
mean_duration <- mean(df_completed$duration_minutes, na.rm = TRUE)
median_duration <- median(df_completed$duration_minutes, na.rm = TRUE)

p2 <- plot_ly(df_completed, x = ~duration_minutes, type = 'histogram',
        nbinsx = 50,
        marker = list(color = custom_colors$secondary, opacity = 0.7),
        hovertemplate = "Duration: %{x} min<br>Count: %{y}<extra></extra>") %>%
  layout(
    title = "Survey Duration Distribution with Statistical Markers",
    xaxis = list(title = "Duration (minutes)"),
    yaxis = list(title = "Frequency"),
    paper_bgcolor = "transparent", 
    plot_bgcolor = "transparent",
    showlegend = FALSE,
    shapes = list(
      list(
        type = "line",
        x0 = mean_duration, x1 = mean_duration,
        y0 = 0, y1 = 1,
        yref = "paper",
        line = list(color = custom_colors$danger, dash = "dash", width = 2)
      ),
      list(
        type = "line", 
        x0 = median_duration, x1 = median_duration,
        y0 = 0, y1 = 1,
        yref = "paper",
        line = list(color = custom_colors$success, dash = "dash", width = 2)
      )
    ),
    annotations = list(
      list(
        x = mean_duration,
        y = 0.9,
        yref = "paper",
        text = paste("Mean:", round(mean_duration, 1), "min"),
        showarrow = TRUE,
        arrowcolor = custom_colors$danger
      ),
      list(
        x = median_duration,
        y = 0.8,
        yref = "paper", 
        text = paste("Median:", round(median_duration, 1), "min"),
        showarrow = TRUE,
        arrowcolor = custom_colors$success
      )
    )
  )

p2
```
:::

### Weekly Performance Trends with Moving Average

::: {.plot-container}
```{r weekly_trends_advanced}
#| echo: false

# Weekly trends with moving average
weekly_data <- df_completed %>%
  group_by(week) %>%
  summarise(
    surveys = n(),
    avg_duration = mean(duration_minutes, na.rm = TRUE),
    quality_rate = mean(!is_short_survey & !is_night_survey, na.rm = TRUE) * 100,
    .groups = "drop"
  ) %>%
  arrange(week) %>%
  mutate(
    surveys_ma = zoo::rollmean(surveys, k = 3, fill = NA, align = "right"),
    duration_ma = zoo::rollmean(avg_duration, k = 3, fill = NA, align = "right")
  )

p3 <- plot_ly(weekly_data, x = ~week, y = ~surveys, type = 'scatter', mode = 'lines+markers',
        name = 'Weekly Surveys',
        line = list(color = custom_colors$primary, width = 2), 
        marker = list(color = custom_colors$primary, size = 6),
        hovertemplate = "Week: %{x}<br>Surveys: %{y}<extra></extra>") %>%
  add_trace(y = ~surveys_ma, name = '3-Week Moving Average',
            line = list(color = custom_colors$danger, width = 3, dash = 'dash'),
            hovertemplate = "Week: %{x}<br>3-Week MA: %{y:.1f}<extra></extra>") %>%
  layout(
    title = "Weekly Survey Trends with Moving Average",
    xaxis = list(title = "Week"),
    yaxis = list(title = "Number of Surveys"),
    paper_bgcolor = "transparent", 
    plot_bgcolor = "transparent",
    legend = list(orientation = 'h', y = 1.1, x = 0.5, xanchor = 'center')
  )

p3
```
:::

### Time Series Analysis

::: {.plot-container}
```{r time_series_analysis}
#| echo: false

# Daily survey counts with trend analysis
daily_data <- df_completed %>%
  group_by(date) %>%
  summarise(surveys = n(), .groups = "drop") %>%
  arrange(date) %>%
  mutate(
    day_number = as.numeric(date - min(date)) + 1,
    trend = predict(loess(surveys ~ day_number, span = 0.3)),
    residual = surveys - trend
  )

p5 <- plot_ly(daily_data, x = ~date, y = ~surveys, type = 'scatter', mode = 'lines',
        name = 'Daily Surveys', line = list(color = custom_colors$primary),
        hovertemplate = "Date: %{x}<br>Surveys: %{y}<extra></extra>") %>%
  add_trace(y = ~trend, name = 'Trend', 
            line = list(color = custom_colors$danger, width = 3),
            hovertemplate = "Date: %{x}<br>Trend: %{y:.1f}<extra></extra>") %>%
  layout(
    title = "Daily Survey Count with Trend",
    xaxis = list(title = "Date"),
    yaxis = list(title = "Surveys"),
    paper_bgcolor = "transparent",
    showlegend = TRUE,
    legend = list(orientation = 'h', y = 1.1, x = 0.5, xanchor = 'center')
  )

p5
```
:::

## ðŸ“Š Statistical Summary

::: {.table-container}
```{r statistical_summary}
#| echo: false

# Comprehensive statistical summary
stats_summary <- df_completed %>%
  summarise(
    `Total Surveys` = n(),
    `Mean Duration (min)` = round(mean(duration_minutes, na.rm = TRUE), 2),
    `Median Duration (min)` = round(median(duration_minutes, na.rm = TRUE), 2),
    `Std Dev Duration` = round(sd(duration_minutes, na.rm = TRUE), 2),
    `Min Duration (min)` = round(min(duration_minutes, na.rm = TRUE), 2),
    `Max Duration (min)` = round(max(duration_minutes, na.rm = TRUE), 2),
    `Short Survey Rate (%)` = round(mean(is_short_survey, na.rm = TRUE) * 100, 2),
    `Night Survey Rate (%)` = round(mean(is_night_survey, na.rm = TRUE) * 100, 2),
    `Weekend Survey Rate (%)` = round(mean(is_weekend, na.rm = TRUE) * 100, 2),
    `Mean HH Size` = round(mean(hh_size, na.rm = TRUE), 2),
    `Mean Age` = round(mean(age, na.rm = TRUE), 2)
  ) %>%
  pivot_longer(everything(), names_to = "Metric", values_to = "Value")

reactable(
  stats_summary,
  columns = list(
    Metric = colDef(
      name = "Statistical Metric",
      minWidth = 200,
      cell = function(value) {
        div(style = "font-weight: bold; color: #2E8B57;", value)
      }
    ),
    Value = colDef(
      name = "Value",
      align = "center",
      cell = function(value) {
        div(style = "font-weight: bold;", value)
      }
    )
  ),
  highlight = TRUE,
  bordered = TRUE,
  striped = TRUE,
  theme = reactableTheme(
    headerStyle = list(backgroundColor = "#f8f9fa", fontWeight = "bold"),
    cellStyle = list(fontSize = "0.9em")
  )
)
```
:::